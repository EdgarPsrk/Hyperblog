Notas
Todos empiezan con git

init = iniciamos el repositorio en la carpeta donde estamos

config --global user.name "name" = configuramos el nombre para el registro de los cambios

config --global user.email "correoRelazionado" = usamos el correo para identificarnos

add . = agrega los cambios de cada archivo, se puede poner a cada archivo por separado o trackear  todo con el .

commit = pasa los cambios del staging a la base de datos del repositorio local, debe llevar un mensaje que se puede 
         agregar con la bandera -m al colocarla con 'mensaje' o por el editor vim, podemos agregar la bandera -am
         para agregar todos los cambios realizados en el archivo ya trackeado, ( solo sirve para archivos anteriormente trackeados)
         y colocar el mensaje, ahorrandonos el comando gitt add .

branch "nameBranch" = crea una rama al colocar 'nombre_rama'

checkout = cambia de una rama a otra al colocar la rama o podemos pasar a un tag antiguo colocando delante el numero asignado

show = muestra los cambios del ultimo commit

log = muestra los commits realizados durante el progreso de la rama asi como los tags que poseee cada uno.

status = muestra el estado de los archivos (untracked, tracked, modified).

merge "ramaTraida"= fusiona de la rama en la que estamos a la que apuntemos 'rama' reliza el commit referenciado a la rama que estamos.

remote origin "url" = esto es por http para agregar los cambios de manera remota al github, agregamos una dirrecion donde guardaremos estos cambios.

push origin master = enviados al repositorio local a github.

pull origin master = traemos los cambios ocurridos en el github a nuestro repositorio local, esto es una buena practica, traer todo lo que hay haya antes de mandar algo.

git pull origin master --allow-unrelated-histories = lo usamos paera iniciar el repositorio por los conflictos que se generan al traer 
                                                     por primera vez el proyecto cuando ya esta avanzado.

generamos una clave de SHH
ssh-keygen -t rsa -b 4096 -C "correoRelazionado" = generamos una llave publica y privada.
eval $(ssh-agent -s) = comando para evaluar el funcionaminto de el administrador de llaves ssh
ssh-add ~/.ssh/id_rsa = agregamos la llave en windows

remote set-url origin "urlPorSSH" = seteamos el cambio de el tipo de comunicacion que se tendria en la comunicacion del repositorio a SHH

log --all --graph --decorate --oneline = comando para mostra bonito el log

tag -a "nameOfTAG" -m "messagesForTAG" "#TAG" = creamos un tag para la referencia "#TAG" que es un numero asignado por los commits adicional
                                                tenemos la bandera -a para agregar el tag, la -m para el mensaje ya que tenemos que dejar un mensaje
                                                de la creacion del tag, como en un commit, esto deja una instancia para ver que estamos haciendo en ese momento.

show-ref --tags = nos permite ver los tags asi como la referencia numerica de estos.

push --tags = lo usamos para empujar las etiquetas que generamos en el local a el HUB

tag -d "nameOfTAG" = usamos este comando para eliminar un tag

push origin :refs/tags/error = con este comando borramos el tag enviado al HUB, es una sistaxis especial de github

clone "url" = lo usamos despues de un fork con lo cual nos trea todos los archivos de este bifurcacion, para poder trabajarlo en local

remote add "upstream" = usamos este comando para agregar las actualizaciones de un fork, es decir agregamos otro pundo de donde traer datos cion el pull
                        esto nos permite tener actualizado ese fork de un proyect, se traen los cambios con "pull upstream master" para despues fusionarlos
                        con el nuestro fork, en 2 pasos traemos los cambios al repositorio local a git en la rama master, hacemos un commit de los cambios,
                        para despues hacer un push a nuestro github con el "push origin master", ---traemos a local, registramos los cambios y mandamos a 
                        nuestro fork en github--- de este manera tenemso 2 fuent4es para actualizar el repositorio local.